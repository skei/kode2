


TODO
MAYBE
IDEAS
SUGGESTIONS
CONSIDERATIONS



----------------------------------------------------------------------
plugin
----------------------------------------------------------------------



* data-transfer

  safe, thread-safe, lock/wait-free way to transfer data buffers to/from
  processing/gui parts.. samples for fft analysis, to paint output uv,
  waveforms, image to audio,..






------------------------------
vst3
------------------------------



* midi out
* state (editor & plugin)
* presets



------------------------------
lv2
------------------------------



* extensions
* gui
* embedded manifest



------------------------------
parameters
------------------------------



* sample-accurate automation

  currently, the automation uses the last value received per block
  todo: ramp/interpolate
  a) split block at parameter changes, interpolate parameter values
     between those
  b) give plugins the (sorted) list of parameter changes for the
     current block
  c) keep track of interpolated parameter values, add function to
     calc value for current sample in block..



* parameter dezipping/denoising



* parameter types

  - dB
  - hz
  - simplify on_parameter, if plugin have array for params, and
    param convert does everything needed, we can just insert the value
    into the array, instead of a big switch/case section..



------------------------------
audio
------------------------------



* tick-processing

  cache lines = 16 floats
  simd = 4 floats (or 8 for avx?)
  4 simd operations per cache line
  - unrolling loops
  - const propagation
  split processing block into 16-samples chunks
  hardcode as much as posssible, even destination addressed
  (calc to hardcoded 16-samples buffer, so that all low-level processing
  functions are loop-unrolled, fixed number of iterations, etc..

  16 samples = 0.3ms at 48khz..



----------------------------------------------------------------------
gui
----------------------------------------------------------------------



* mouse cursor

  investigate why we get these weird cursors..
  looks like kde



* resizable editor
* scale factor for gui



* clipping

  something isn't right with the clipping..
  it's related somehow to deeper
  it might have something to do with the clip rect stack, and widgets not
  resetting the clip rect correctly before returning to parent widget
  (painting the next child widgets)



------------------------------
widgets
------------------------------



* widget background/border

  move fill background, draw border to base widget, since these are
  used almost everywhere..



* resizable widgets

  see kode_sizer_widget:
    on_mouse_move
      float deltax = AXpos - prevx;
      float deltay = AYpos - prevy;
      do_widget_resized(this,deltax,deltay)



* alignment

  - stacking
  - min/max sizes (resizing)



* clipping

  - update-rect vs MRect somewhere?
  - hierarchy, push/pop clip..



------------------------------
specific widgets
------------------------------


* new widgets:

  - lider w/thumb (image)
  - xy-pad
  - dual-value knobs (sliders?)
    - right click for value2
    - range.. show modulation..



* dragvalue

  - snap, quantize
    - wdg.parameter, is_stepped
    - param.defaultvalue



* scrollbar

  - combine with dualslider
  - optional mouse movement from dragvalue (sensibility)
             initial sensitivity -> pixel perfect
  - optional up/down buttons
    min/max thumb size (resize scollbox)
  - keep track of real and drawn/used thumb size



* slider-bank

  - stepped/quantized values..
  - option: need shift/ctrl to draw
  - interactive bar color
  - draw line from top of each bar = value-graph, combine?



* text

  - vertical text
    (is it possible with xcb?)



* text-edit

  - mouse/xy -> char pos..
    int getCharIndexFromXpos(float xpos)
    (getStringWidth)
  - fix chars (shift doesn't work)
  - modal doesn't work: error when exiting



* value-widget

  adjustable precision (after .) in getdisplaytext
  timer, adjust caret color (blink)



* waveform, circular..

  - cache positions (so we don't need to trash cache every time)
  - combine circular & regular..
    - (index to line endpoints)
    - circular: precalc line endpoints
    - circular: draw areas as arcs



*
